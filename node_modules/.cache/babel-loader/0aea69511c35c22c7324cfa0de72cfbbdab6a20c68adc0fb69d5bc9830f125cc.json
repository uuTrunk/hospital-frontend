{"ast":null,"code":"import axios from 'axios';\nimport { Message } from 'element-ui';\n\n// 创建axios实例\nconst service = axios.create({\n  baseURL: 'http://localhost:8080',\n  // 设置正确的baseURL\n  timeout: 5000,\n  headers: {\n    'Content-Type': 'application/json;charset=UTF-8'\n  },\n  withCredentials: true\n});\n\n// 请求拦截器\nservice.interceptors.request.use(config => {\n  // 在发送请求之前做些什么\n  return config;\n}, error => {\n  // 对请求错误做些什么\n  console.error('请求发送失败:', error);\n  return Promise.reject(error);\n});\n\n// 响应拦截器\nservice.interceptors.response.use(response => {\n  const res = response.data;\n  // 如果返回的状态码不是200，说明接口有问题，把错误信息显示出来\n  if (res.code !== 200) {\n    Message({\n      message: res.message || '请求失败',\n      type: 'error',\n      duration: 5 * 1000\n    });\n    return Promise.reject(new Error(res.message || '请求失败'));\n  } else {\n    return res;\n  }\n}, error => {\n  console.error('请求失败:', error);\n  // 处理404错误\n  if (error.response && error.response.status === 404) {\n    Message({\n      message: '请求的资源不存在',\n      type: 'error',\n      duration: 5 * 1000\n    });\n  } else {\n    Message({\n      message: error.message || '请求失败，请稍后重试',\n      type: 'error',\n      duration: 5 * 1000\n    });\n  }\n  return Promise.reject(error);\n});\nexport default service;","map":{"version":3,"names":["axios","Message","service","create","baseURL","timeout","headers","withCredentials","interceptors","request","use","config","error","console","Promise","reject","response","res","data","code","message","type","duration","Error","status"],"sources":["/Users/seaocean/projects/test1/hospital/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\nimport { Message } from 'element-ui'\n\n// 创建axios实例\nconst service = axios.create({\n    baseURL: 'http://localhost:8080',  // 设置正确的baseURL\n    timeout: 5000,\n    headers: {\n        'Content-Type': 'application/json;charset=UTF-8'\n    },\n    withCredentials: true\n})\n\n// 请求拦截器\nservice.interceptors.request.use(\n    config => {\n        // 在发送请求之前做些什么\n        return config\n    },\n    error => {\n        // 对请求错误做些什么\n        console.error('请求发送失败:', error)\n        return Promise.reject(error)\n    }\n)\n\n// 响应拦截器\nservice.interceptors.response.use(\n    response => {\n        const res = response.data\n        // 如果返回的状态码不是200，说明接口有问题，把错误信息显示出来\n        if (res.code !== 200) {\n            Message({\n                message: res.message || '请求失败',\n                type: 'error',\n                duration: 5 * 1000\n            })\n            return Promise.reject(new Error(res.message || '请求失败'))\n        } else {\n            return res\n        }\n    },\n    error => {\n        console.error('请求失败:', error)\n        // 处理404错误\n        if (error.response && error.response.status === 404) {\n            Message({\n                message: '请求的资源不存在',\n                type: 'error',\n                duration: 5 * 1000\n            })\n        } else {\n            Message({\n                message: error.message || '请求失败，请稍后重试',\n                type: 'error',\n                duration: 5 * 1000\n            })\n        }\n        return Promise.reject(error)\n    }\n)\n\nexport default service "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,QAAQ,YAAY;;AAEpC;AACA,MAAMC,OAAO,GAAGF,KAAK,CAACG,MAAM,CAAC;EACzBC,OAAO,EAAE,uBAAuB;EAAG;EACnCC,OAAO,EAAE,IAAI;EACbC,OAAO,EAAE;IACL,cAAc,EAAE;EACpB,CAAC;EACDC,eAAe,EAAE;AACrB,CAAC,CAAC;;AAEF;AACAL,OAAO,CAACM,YAAY,CAACC,OAAO,CAACC,GAAG,CAC5BC,MAAM,IAAI;EACN;EACA,OAAOA,MAAM;AACjB,CAAC,EACDC,KAAK,IAAI;EACL;EACAC,OAAO,CAACD,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;EAC/B,OAAOE,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;AAChC,CACJ,CAAC;;AAED;AACAV,OAAO,CAACM,YAAY,CAACQ,QAAQ,CAACN,GAAG,CAC7BM,QAAQ,IAAI;EACR,MAAMC,GAAG,GAAGD,QAAQ,CAACE,IAAI;EACzB;EACA,IAAID,GAAG,CAACE,IAAI,KAAK,GAAG,EAAE;IAClBlB,OAAO,CAAC;MACJmB,OAAO,EAAEH,GAAG,CAACG,OAAO,IAAI,MAAM;MAC9BC,IAAI,EAAE,OAAO;MACbC,QAAQ,EAAE,CAAC,GAAG;IAClB,CAAC,CAAC;IACF,OAAOR,OAAO,CAACC,MAAM,CAAC,IAAIQ,KAAK,CAACN,GAAG,CAACG,OAAO,IAAI,MAAM,CAAC,CAAC;EAC3D,CAAC,MAAM;IACH,OAAOH,GAAG;EACd;AACJ,CAAC,EACDL,KAAK,IAAI;EACLC,OAAO,CAACD,KAAK,CAAC,OAAO,EAAEA,KAAK,CAAC;EAC7B;EACA,IAAIA,KAAK,CAACI,QAAQ,IAAIJ,KAAK,CAACI,QAAQ,CAACQ,MAAM,KAAK,GAAG,EAAE;IACjDvB,OAAO,CAAC;MACJmB,OAAO,EAAE,UAAU;MACnBC,IAAI,EAAE,OAAO;MACbC,QAAQ,EAAE,CAAC,GAAG;IAClB,CAAC,CAAC;EACN,CAAC,MAAM;IACHrB,OAAO,CAAC;MACJmB,OAAO,EAAER,KAAK,CAACQ,OAAO,IAAI,YAAY;MACtCC,IAAI,EAAE,OAAO;MACbC,QAAQ,EAAE,CAAC,GAAG;IAClB,CAAC,CAAC;EACN;EACA,OAAOR,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;AAChC,CACJ,CAAC;AAED,eAAeV,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}