{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nimport healthAssessment from './modules/healthAssessment';\nimport { getAdmissionAssessmentList, getHealthAssessmentDetail, submitHealthAssessment, getCareAssessmentDetail, submitCareAssessment, uploadMedicalReport } from '../api/admission';\nVue.use(Vuex);\nexport default new Vuex.Store({\n  state: {\n    patients: []\n  },\n  getters: {\n    pendingAdmissionCount(state) {\n      return state.patients.filter(patient => patient.healthStatus === '待评估' || patient.careStatus === '待评估').length;\n    },\n    pendingDischargeCount(state) {\n      return state.patients.filter(p => p.status === '待出院').length;\n    }\n  },\n  mutations: {\n    SET_PATIENTS(state, patients) {\n      state.patients = patients;\n    },\n    updatePatientHealthAssessment(state, {\n      patientId,\n      status,\n      time,\n      operator\n    }) {\n      const patient = state.patients.find(p => p.patientId === patientId);\n      if (patient) {\n        patient.healthStatus = status;\n        patient.healthTime = time;\n        patient.healthOperator = operator;\n      }\n    },\n    updatePatientCareAssessment(state, {\n      patientId,\n      status,\n      time,\n      operator\n    }) {\n      const patient = state.patients.find(p => p.patientId === patientId);\n      if (patient) {\n        patient.careStatus = status;\n        patient.careTime = time;\n        patient.careOperator = operator;\n      }\n    },\n    completeAdmission(state, patientId) {\n      const patient = state.patients.find(p => p.id === patientId);\n      if (patient) {\n        patient.admissionCompleted = true;\n      }\n    }\n  },\n  actions: {\n    async fetchPatients({\n      commit\n    }) {\n      try {\n        const response = await fetch('/api/patients');\n        const data = await response.json();\n        commit('SET_PATIENTS', data);\n      } catch (error) {\n        console.error('获取患者列表失败:', error);\n      }\n    },\n    async updateHealthAssessment({\n      commit\n    }, payload) {\n      try {\n        await submitHealthAssessment(payload);\n        commit('updatePatientHealthAssessment', {\n          patientId: payload.patientId,\n          status: payload.status === 'completed' ? '完成' : payload.status === 'rejected' ? '不同意入院' : '待评估',\n          time: payload.time,\n          operator: payload.operator\n        });\n      } catch (error) {\n        console.error('更新健康评估失败:', error);\n        throw error;\n      }\n    },\n    async updateCareAssessment({\n      commit\n    }, payload) {\n      try {\n        await submitCareAssessment(payload);\n        commit('updatePatientCareAssessment', {\n          patientId: payload.patientId,\n          status: payload.status === 'completed' ? '完成' : payload.status === 'rejected' ? '不同意入院' : '待评估',\n          time: payload.time,\n          operator: payload.operator\n        });\n      } catch (error) {\n        console.error('更新照护评估失败:', error);\n        throw error;\n      }\n    },\n    async fetchHealthAssessmentDetail(commit, id) {\n      const response = await getHealthAssessmentDetail(id);\n      return response;\n    },\n    async fetchCareAssessmentDetail(commit, id) {\n      const response = await getCareAssessmentDetail(id);\n      return response;\n    },\n    async uploadMedicalReport(commit, payload) {\n      const response = await uploadMedicalReport(payload);\n      return response;\n    },\n    async finishAdmission({\n      commit\n    }, patientId) {\n      try {\n        commit('completeAdmission', patientId);\n      } catch (error) {\n        console.error('完成入院失败:', error);\n        throw error;\n      }\n    }\n  },\n  modules: {\n    healthAssessment\n  }\n});","map":{"version":3,"names":["Vue","Vuex","healthAssessment","getAdmissionAssessmentList","getHealthAssessmentDetail","submitHealthAssessment","getCareAssessmentDetail","submitCareAssessment","uploadMedicalReport","use","Store","state","patients","getters","pendingAdmissionCount","filter","patient","healthStatus","careStatus","length","pendingDischargeCount","p","status","mutations","SET_PATIENTS","updatePatientHealthAssessment","patientId","time","operator","find","healthTime","healthOperator","updatePatientCareAssessment","careTime","careOperator","completeAdmission","id","admissionCompleted","actions","fetchPatients","commit","response","fetch","data","json","error","console","updateHealthAssessment","payload","updateCareAssessment","fetchHealthAssessmentDetail","fetchCareAssessmentDetail","finishAdmission","modules"],"sources":["/Users/seaocean/projects/test/hospital/src/store/index.js"],"sourcesContent":["import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\nimport healthAssessment from './modules/healthAssessment'\r\nimport { getAdmissionAssessmentList, getHealthAssessmentDetail, submitHealthAssessment, getCareAssessmentDetail, submitCareAssessment, uploadMedicalReport } from '../api/admission'\r\n\r\nVue.use(Vuex)\r\n\r\nexport default new Vuex.Store({\r\n  state: {\r\n    patients: []\r\n  },\r\n  getters: {\r\n    pendingAdmissionCount(state) {\r\n      return state.patients.filter(patient =>\r\n        patient.healthStatus === '待评估' ||\r\n        patient.careStatus === '待评估'\r\n      ).length;\r\n    },\r\n    pendingDischargeCount(state) {\r\n      return state.patients.filter(p => p.status === '待出院').length;\r\n    }\r\n  },\r\n  mutations: {\r\n    SET_PATIENTS(state, patients) {\r\n      state.patients = patients\r\n    },\r\n    updatePatientHealthAssessment(state, { patientId, status, time, operator }) {\r\n      const patient = state.patients.find(p => p.patientId === patientId);\r\n      if (patient) {\r\n        patient.healthStatus = status;\r\n        patient.healthTime = time;\r\n        patient.healthOperator = operator;\r\n      }\r\n    },\r\n    updatePatientCareAssessment(state, { patientId, status, time, operator }) {\r\n      const patient = state.patients.find(p => p.patientId === patientId);\r\n      if (patient) {\r\n        patient.careStatus = status;\r\n        patient.careTime = time;\r\n        patient.careOperator = operator;\r\n      }\r\n    },\r\n    completeAdmission(state, patientId) {\r\n      const patient = state.patients.find(p => p.id === patientId);\r\n      if (patient) {\r\n        patient.admissionCompleted = true;\r\n      }\r\n    }\r\n  },\r\n  actions: {\r\n    async fetchPatients({ commit }) {\r\n      try {\r\n        const response = await fetch('/api/patients')\r\n        const data = await response.json()\r\n        commit('SET_PATIENTS', data)\r\n      } catch (error) {\r\n        console.error('获取患者列表失败:', error)\r\n      }\r\n    },\r\n    async updateHealthAssessment({ commit }, payload) {\r\n      try {\r\n        await submitHealthAssessment(payload);\r\n        commit('updatePatientHealthAssessment', {\r\n          patientId: payload.patientId,\r\n          status: payload.status === 'completed' ? '完成' :\r\n            payload.status === 'rejected' ? '不同意入院' : '待评估',\r\n          time: payload.time,\r\n          operator: payload.operator\r\n        });\r\n      } catch (error) {\r\n        console.error('更新健康评估失败:', error);\r\n        throw error;\r\n      }\r\n    },\r\n    async updateCareAssessment({ commit }, payload) {\r\n      try {\r\n        await submitCareAssessment(payload);\r\n        commit('updatePatientCareAssessment', {\r\n          patientId: payload.patientId,\r\n          status: payload.status === 'completed' ? '完成' :\r\n            payload.status === 'rejected' ? '不同意入院' : '待评估',\r\n          time: payload.time,\r\n          operator: payload.operator\r\n        });\r\n      } catch (error) {\r\n        console.error('更新照护评估失败:', error);\r\n        throw error;\r\n      }\r\n    },\r\n    async fetchHealthAssessmentDetail(commit, id) {\r\n      const response = await getHealthAssessmentDetail(id);\r\n      return response;\r\n    },\r\n    async fetchCareAssessmentDetail(commit, id) {\r\n      const response = await getCareAssessmentDetail(id);\r\n      return response;\r\n    },\r\n    async uploadMedicalReport(commit, payload) {\r\n      const response = await uploadMedicalReport(payload);\r\n      return response;\r\n    },\r\n    async finishAdmission({ commit }, patientId) {\r\n      try {\r\n        commit('completeAdmission', patientId);\r\n      } catch (error) {\r\n        console.error('完成入院失败:', error);\r\n        throw error;\r\n      }\r\n    }\r\n  },\r\n  modules: {\r\n    healthAssessment\r\n  }\r\n}) "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}