{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nimport { getAdmissionAssessmentList, getHealthAssessmentDetail, submitHealthAssessment, getCareAssessmentDetail, submitCareAssessment, uploadMedicalReport } from '../api/admission';\nVue.use(Vuex);\nexport default new Vuex.Store({\n  state: {\n    patients: []\n  },\n  getters: {\n    pendingAdmissionCount(state) {\n      return state.patients.filter(patient => patient.healthStatus === '待评估' || patient.careStatus === '待评估').length;\n    },\n    pendingDischargeCount(state) {\n      return state.patients.filter(p => p.status === '待出院').length;\n    }\n  },\n  mutations: {\n    setPatients(state, patients) {\n      state.patients = patients;\n    },\n    updatePatientHealthAssessment(state, {\n      patientId,\n      status,\n      time,\n      operator\n    }) {\n      const patient = state.patients.find(p => p.patientId === patientId);\n      if (patient) {\n        patient.healthStatus = status;\n        patient.healthTime = time;\n        patient.healthOperator = operator;\n      }\n    },\n    updatePatientCareAssessment(state, {\n      patientId,\n      status,\n      time,\n      operator\n    }) {\n      const patient = state.patients.find(p => p.patientId === patientId);\n      if (patient) {\n        patient.careStatus = status;\n        patient.careTime = time;\n        patient.careOperator = operator;\n      }\n    },\n    completeAdmission(state, patientId) {\n      const patient = state.patients.find(p => p.id === patientId);\n      if (patient) {\n        patient.admissionCompleted = true;\n      }\n    }\n  },\n  actions: {\n    async fetchPatients({\n      commit\n    }, params) {\n      try {\n        // 构造符合 API 规范的参数\n        const apiParams = {\n          start_date: params.startDate,\n          end_date: params.endDate,\n          name_or_code: params.keyword,\n          // Assuming keyword maps to name_or_code\n          page: params.page,\n          page_size: params.pageSize\n        };\n        console.log('Fetching patients with apiParams:', apiParams);\n        const response = await getAdmissionAssessmentList(apiParams); // 使用转换后的参数\n        console.log('API Response:', response);\n        if (response.data && response.data.data) {\n          console.log('Setting patients:', response.data.data.list);\n          commit('setPatients', response.data.data.list);\n        } else {\n          console.warn('Invalid response format:', response);\n        }\n      } catch (error) {\n        console.error('获取患者列表失败:', error);\n      }\n    },\n    async updateHealthAssessment({\n      commit\n    }, payload) {\n      try {\n        // 构造符合 API 规范的数据\n        const apiData = {\n          assessment_id: payload.patientId,\n          // Assuming patientId is assessmentId\n          current_illness: payload.details.currentIllnesses,\n          // Assuming details structure\n          forbidden_medicines: payload.details.forbiddenMedicine,\n          diet_restrictions: payload.details.diet,\n          // Needs conversion based on backend needs\n          physical_conclusion: payload.details.conclusion,\n          admission_agreement: payload.status === 'completed' ? '同意入院' : '不同意入院' // Map status back\n          // Add other fields like past_illnesses, medical_report_files if needed\n        };\n        await submitHealthAssessment(apiData); // 使用转换后的数据\n\n        commit('updatePatientHealthAssessment', {\n          patientId: payload.patientId,\n          status: payload.status === 'completed' ? '完成' : payload.status === 'rejected' ? '不同意入院' : '待评估',\n          time: payload.time,\n          operator: payload.operator\n        });\n      } catch (error) {\n        console.error('更新健康评估失败:', error);\n        throw error;\n      }\n    },\n    async updateCareAssessment({\n      commit\n    }, payload) {\n      try {\n        // 构造符合 API 规范的数据\n        const apiData = {\n          assessment_id: payload.patientId,\n          // Assuming patientId is assessmentId\n          assessment_items: payload.details // Assuming details contains the assessment items\n          // Add operator, time if needed by backend API\n        };\n        await submitCareAssessment(apiData); // 使用转换后的数据\n\n        commit('updatePatientCareAssessment', {\n          patientId: payload.patientId,\n          status: payload.status === 'completed' ? '完成' : payload.status === 'rejected' ? '不同意入院' : '待评估',\n          time: payload.time,\n          operator: payload.operator\n        });\n      } catch (error) {\n        console.error('更新照护评估失败:', error);\n        throw error;\n      }\n    },\n    async fetchHealthAssessmentDetail(commit, id) {\n      const response = await getHealthAssessmentDetail(id);\n      return response;\n    },\n    async fetchCareAssessmentDetail(commit, id) {\n      const response = await getCareAssessmentDetail(id);\n      return response;\n    },\n    async uploadMedicalReport(commit, payload) {\n      // 构造符合 API 规范的数据\n      const apiData = {\n        assessment_id: payload.assessment_id,\n        // Ensure payload has snake_case keys\n        report_type: payload.report_type,\n        file: payload.file\n      };\n      const response = await uploadMedicalReport(apiData); // 使用转换后的数据\n      return response;\n    },\n    async finishAdmission({\n      commit\n    }, patientId) {\n      try {\n        // 这里可以添加完成入院的 API 调用\n        commit('completeAdmission', patientId);\n      } catch (error) {\n        console.error('完成入院失败:', error);\n        throw error;\n      }\n    }\n  },\n  modules: {}\n});","map":{"version":3,"names":["Vue","Vuex","getAdmissionAssessmentList","getHealthAssessmentDetail","submitHealthAssessment","getCareAssessmentDetail","submitCareAssessment","uploadMedicalReport","use","Store","state","patients","getters","pendingAdmissionCount","filter","patient","healthStatus","careStatus","length","pendingDischargeCount","p","status","mutations","setPatients","updatePatientHealthAssessment","patientId","time","operator","find","healthTime","healthOperator","updatePatientCareAssessment","careTime","careOperator","completeAdmission","id","admissionCompleted","actions","fetchPatients","commit","params","apiParams","start_date","startDate","end_date","endDate","name_or_code","keyword","page","page_size","pageSize","console","log","response","data","list","warn","error","updateHealthAssessment","payload","apiData","assessment_id","current_illness","details","currentIllnesses","forbidden_medicines","forbiddenMedicine","diet_restrictions","diet","physical_conclusion","conclusion","admission_agreement","updateCareAssessment","assessment_items","fetchHealthAssessmentDetail","fetchCareAssessmentDetail","report_type","file","finishAdmission","modules"],"sources":["/Users/seaocean/projects/test/hospital/src/store/index.js"],"sourcesContent":["import Vue from 'vue'\nimport Vuex from 'vuex'\nimport { getAdmissionAssessmentList, getHealthAssessmentDetail, submitHealthAssessment, getCareAssessmentDetail, submitCareAssessment, uploadMedicalReport } from '../api/admission'\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  state: {\n    patients: []\n  },\n  getters: {\n    pendingAdmissionCount(state) {\n      return state.patients.filter(patient =>\n        patient.healthStatus === '待评估' ||\n        patient.careStatus === '待评估'\n      ).length;\n    },\n    pendingDischargeCount(state) {\n      return state.patients.filter(p => p.status === '待出院').length;\n    }\n  },\n  mutations: {\n    setPatients(state, patients) {\n      state.patients = patients;\n    },\n    updatePatientHealthAssessment(state, { patientId, status, time, operator }) {\n      const patient = state.patients.find(p => p.patientId === patientId);\n      if (patient) {\n        patient.healthStatus = status;\n        patient.healthTime = time;\n        patient.healthOperator = operator;\n      }\n    },\n    updatePatientCareAssessment(state, { patientId, status, time, operator }) {\n      const patient = state.patients.find(p => p.patientId === patientId);\n      if (patient) {\n        patient.careStatus = status;\n        patient.careTime = time;\n        patient.careOperator = operator;\n      }\n    },\n    completeAdmission(state, patientId) {\n      const patient = state.patients.find(p => p.id === patientId);\n      if (patient) {\n        patient.admissionCompleted = true;\n      }\n    }\n  },\n  actions: {\n    async fetchPatients({ commit }, params) {\n      try {\n        // 构造符合 API 规范的参数\n        const apiParams = {\n          start_date: params.startDate,\n          end_date: params.endDate,\n          name_or_code: params.keyword, // Assuming keyword maps to name_or_code\n          page: params.page,\n          page_size: params.pageSize\n        };\n        console.log('Fetching patients with apiParams:', apiParams);\n        const response = await getAdmissionAssessmentList(apiParams); // 使用转换后的参数\n        console.log('API Response:', response);\n        if (response.data && response.data.data) {\n          console.log('Setting patients:', response.data.data.list);\n          commit('setPatients', response.data.data.list);\n        } else {\n          console.warn('Invalid response format:', response);\n        }\n      } catch (error) {\n        console.error('获取患者列表失败:', error);\n      }\n    },\n    async updateHealthAssessment({ commit }, payload) {\n      try {\n        // 构造符合 API 规范的数据\n        const apiData = {\n          assessment_id: payload.patientId, // Assuming patientId is assessmentId\n          current_illness: payload.details.currentIllnesses, // Assuming details structure\n          forbidden_medicines: payload.details.forbiddenMedicine,\n          diet_restrictions: payload.details.diet, // Needs conversion based on backend needs\n          physical_conclusion: payload.details.conclusion,\n          admission_agreement: payload.status === 'completed' ? '同意入院' : '不同意入院' // Map status back\n          // Add other fields like past_illnesses, medical_report_files if needed\n        };\n        await submitHealthAssessment(apiData); // 使用转换后的数据\n\n        commit('updatePatientHealthAssessment', {\n          patientId: payload.patientId,\n          status: payload.status === 'completed' ? '完成' :\n            payload.status === 'rejected' ? '不同意入院' : '待评估',\n          time: payload.time,\n          operator: payload.operator\n        });\n      } catch (error) {\n        console.error('更新健康评估失败:', error);\n        throw error;\n      }\n    },\n    async updateCareAssessment({ commit }, payload) {\n      try {\n        // 构造符合 API 规范的数据\n        const apiData = {\n          assessment_id: payload.patientId, // Assuming patientId is assessmentId\n          assessment_items: payload.details // Assuming details contains the assessment items\n          // Add operator, time if needed by backend API\n        };\n        await submitCareAssessment(apiData); // 使用转换后的数据\n\n        commit('updatePatientCareAssessment', {\n          patientId: payload.patientId,\n          status: payload.status === 'completed' ? '完成' :\n            payload.status === 'rejected' ? '不同意入院' : '待评估',\n          time: payload.time,\n          operator: payload.operator\n        });\n      } catch (error) {\n        console.error('更新照护评估失败:', error);\n        throw error;\n      }\n    },\n    async fetchHealthAssessmentDetail(commit, id) {\n      const response = await getHealthAssessmentDetail(id);\n      return response;\n    },\n    async fetchCareAssessmentDetail(commit, id) {\n      const response = await getCareAssessmentDetail(id);\n      return response;\n    },\n    async uploadMedicalReport(commit, payload) {\n      // 构造符合 API 规范的数据\n      const apiData = {\n        assessment_id: payload.assessment_id, // Ensure payload has snake_case keys\n        report_type: payload.report_type,\n        file: payload.file\n      };\n      const response = await uploadMedicalReport(apiData); // 使用转换后的数据\n      return response;\n    },\n    async finishAdmission({ commit }, patientId) {\n      try {\n        // 这里可以添加完成入院的 API 调用\n        commit('completeAdmission', patientId);\n      } catch (error) {\n        console.error('完成入院失败:', error);\n        throw error;\n      }\n    }\n  },\n  modules: {\n  }\n}) "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}